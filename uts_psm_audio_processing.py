# -*- coding: utf-8 -*-
"""UTS PSM - Audio Processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NjSJDcJ_7s8VhFJ_-mKHCsDSiLuXuZ3Y

## YouTube MP3 Downloader - Audio Representation

### Install Required Packages
"""

# Installing packages
# pip install pytube moviepy soundfile pydub ffmpeg ffmpeg-python IPython

"""### Import Required Packages"""

# importing packages
from pytube import YouTube
from datetime import datetime
import moviepy.editor as mp
import soundfile as sf
from IPython.display import Audio
from IPython.display import display
from pydub import AudioSegment
import numpy as np
import ffmpeg
import os

"""### Check Required Files & Directories"""

# Check Download Directory
if os.path.isdir("./download"):
  print("âœ… Download directory exist.")
else:
  os.mkdir("./download")
  print(" ðŸš© Download Directory doesn't exist. Generating one ...")

# Check Audio Directory
if os.path.isdir("./download/audio"):
  print("âœ… Audio directory exist.")
else:
  os.mkdir("./download/audio")
  print(" ðŸš© Audio Directory doesn't exist. Generating one ...")

# Check Trim Directory
if os.path.isdir("./download/audio/trim"):
  print("âœ… Trim directory exist.")
else:
  os.mkdir("./download/audio/trim")
  print(" ðŸš© Trim Directory doesn't exist. Generating one ...")

# Check Download Generated Directory
if os.path.isdir("./download/generated"):
  print("âœ… Download Generated directory exist.")
else:
  os.mkdir("./download/generated")
  print(" ðŸš© Download Generated Directory doesn't exist. Generating one ...")

# Check Compress Generated Directory
if os.path.isdir("./compress"):
  print("âœ… Compress directory exist.")
else:
  os.mkdir("./compress")
  print(" ðŸš© Compress Directory doesn't exist. Generating one ...")

# Check Compress Generated Directory
if os.path.isdir("./compress/generated"):
  print("âœ… Compress Generated directory exist.")
else:
  os.mkdir("./compress/generated")
  print(" ðŸš© Compress Generated Directory doesn't exist. Generating one ...")

"""### Run the YouTube MP3 Downloader"""

# Convert mp4 to mp3
def Convert(audioTitle):
  try:
    print("Converting...")
    fileName = audioTitle+".mp3"
    clip = mp.VideoFileClip(r"download/generated/temp.mp4")
    clip.audio.write_audiofile(r"download/audio/"+fileName)
    print("Audio converted. Saved in download/audio/"+fileName)
  except:
    print("Error converting!")

# Download mp4 function
def Download(link):
    youtubeObject = YouTube(link, use_oauth=True, allow_oauth_cache=True)
    originalFileName = youtubeObject.title
    youtubeObject = youtubeObject.streams.get_lowest_resolution()
    print(originalFileName)
    fileName = "download/generated/temp.mp4"
    try:
        print("Downloading...")
        youtubeObject.download(filename=fileName)
    except:
        print("Warn")
    return originalFileName

# Controller
link = input("Enter the YouTube video URL:\n")
title = Download(link)
if title:
  Convert(title)
play_sound = Audio("download/audio/"+title+".mp3")
display(play_sound)

"""### Use the Audio Trimmer (Optional)"""

# Input Time Parser Function
def TimeParse(parsedTime):
  for time in parsedTime:
      min, sec = [int(i) for i in time.split(":")]
  seconds = (min*60) + sec
  seconds *= 2
  return seconds
      
# Trim audio function
def Trim(fileName, start, end):
  segment = AudioSegment.from_file("download/audio/"+fileName, format="mp3")
  sr = segment.frame_rate
  start = sr * start
  end = sr * end
  segmentedAudio = segment.get_array_of_samples()
  arraySegment = segmentedAudio[start:end]
  trimmedAudio = segment._spawn(arraySegment)
  trimmedAudio.export("download/audio/trim/"+fileName)

isTrim = input("\nDo you want to trim the audio?\n[y/n]: ")
if isTrim.lower() == "y":
  start = input("Enter starting time in format [Minute]:[Second]\n").split()
  startSecond = TimeParse(start)

  end = input("Enter ending time in format [Minute]:[Second]\n").split()
  endSecond = TimeParse(end)

  Trim(title+".mp3", startSecond, endSecond)
  play_sound = Audio("download/audio/trim/"+title+".mp3")
  display(play_sound)
else:
  print("Alrighty.")

"""### Audio Compressing (Optional)"""

from pydub import AudioSegment
import soundfile as sf
import numpy as np

mp3File = "./download/audio/"+title+".mp3"
wavFile = "./compress/generated/"+title+".wav"

# Convert .wav to .mp3
audio = AudioSegment.from_mp3(mp3File)
audio.export(wavFile, format="wav")

# Retrieve the data from the wav file
data, samplerate = sf.read(wavFile)

# Length of array in data
n = len(data)

# Sample Rate
Fs = samplerate #the sample rate

# Stereo audio has 2 channels, this below will breakdown each channel one-by-one
ch1 = np.array([data[i][0] for i in range(n)])
ch2 = np.array([data[i][1] for i in range(n)])

# Fast Fourier Transform
ch1_Fourier = np.fft.fft(ch1)

# Spectrum of the FFT
abs_ch1_Fourier = np.absolute(ch1_Fourier[:n//2])

eps = 1e-5

# Boolean array where each value indicates whether we keep the corresponding frequency
frequenciesToRemove = (1 - eps) * np.sum(abs_ch1_Fourier) < np.cumsum(abs_ch1_Fourier)

# The frequency for which we cut the spectrum
f0 = (len(frequenciesToRemove) - np.sum(frequenciesToRemove) )* (Fs / 2) / (n / 2)

# Output file name
wavCompressedFile = "./compress/generated/audio_compressed.wav"
mp3CompressedFile = "./compress/"+title+"-compressed.mp3"

# Downsampling factor
D = int(Fs / f0)
# print("Downsampling factor : {}".format(D))

# Getting downsampled data
new_data = data[::D, :]

# Writing into a .wav file
sf.write(wavCompressedFile, new_data, int(Fs / D), 'PCM_16')

# Converting back to mp3
audioCompressed = AudioSegment.from_wav(wavCompressedFile)
audioCompressed.export(mp3CompressedFile, format="mp3")

# Show result
print("Audio compressed successfully! Saved in:\n./compress/"+title+"-compressed.mp3")
play_compressed = Audio("./compress/"+title+"-compressed.mp3")
display(play_compressed)

"""### Audio Before and After Compression Statistics"""

# Original File Stats
original_file_path = "./download/audio/"+title+".mp3"
original_file_stats = os.stat(original_file_path)
print(f'File Size in Bytes is {original_file_stats.st_size}')
print(f'File Size in MegaBytes is {original_file_stats.st_size / (1024 * 1024)}')

# Compressed File Stats
compressed_file_path = "./compress/"+title+"-compressed.mp3"
compressed_file_stats = os.stat(compressed_file_path)
print(f'\nFile Size in Bytes is {compressed_file_stats.st_size}')
print(f'File Size in MegaBytes is {compressed_file_stats.st_size / (1024 * 1024)}')

print("\nCompression rate: ", "%.0f" % int((original_file_stats.st_size / compressed_file_stats.st_size) * 100)+"% effective")